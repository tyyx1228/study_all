# sql内容： list表为主表left_jion之前按时间排序，

input {
  jdbc {
    jdbc_driver_library => "/root/es-package/ojdbc-5.jar"
    jdbc_driver_class => "Java::oracle.jdbc.driver.OracleDriver"
    jdbc_connection_string => "jdbc:oracle:thin:@172.168.100.111:1521:orcl"
    jdbc_user => "jsjd"
    jdbc_password => "jnjtjsjd"
    schedule => "*/1 * * * *"
    # last_run_metadata_path是文件路径
    # 时间的格式为： --- !ruby/object:DateTime '2017-06-27 15:18:57.000000000 +08:00'
    last_run_metadata_path => "./meta/tes_ba_t_p_w_list.meta"

    statement_filepath => "./sql/query_tes_ba_t_p_w_list.sql"
    lowercase_column_names => true
    use_column_value => true
    tracking_column => "update_date"

    #官方提供了分页拉取数据的方式，经测试该方式存在丢数现象，而且同步速度慢。这里采用jdbc的fetch_size方式，不丢数，同步速度也快，合理设置这个值还可以防止OOM
    #jdbc_paging_enabled => true
    #clean_run => false
    #jdbc_page_size => 1000

    jdbc_fetch_size => 1000
    jdbc_default_timezone => "Asia/Shanghai"
  }

  jdbc {
    jdbc_driver_library => "/root/es-package/ojdbc-5.jar"
    jdbc_driver_class => "Java::oracle.jdbc.driver.OracleDriver"
    jdbc_connection_string => "jdbc:oracle:thin:@172.168.100.111:1521:orcl"
    jdbc_user => "jsjd"
    jdbc_password => "jnjtjsjd"
    schedule => "*/1 * * * *"
    # last_run_metadata_path是文件路径
    # 时间的格式为： --- !ruby/object:DateTime '2017-06-27 15:18:57.000000000 +08:00'
    last_run_metadata_path => "./meta/baojing_info_sc.meta"

    statement_filepath => "./sql/query_baojing_info_sc.sql"
    lowercase_column_names => true
    use_column_value => true
    tracking_column => "update_date"

    #官方提供了分页拉取数据的方式，经测试该方式存在丢数现象，而且同步速度慢。这里采用jdbc的fetch_size方式，不丢数，同步速度也快，合理设置这个值还可以防止OOM
    #jdbc_paging_enabled => true
    #clean_run => false
    #jdbc_page_size => 1000

    jdbc_fetch_size => 1000
    jdbc_default_timezone => "Asia/Shanghai"
  }
}

filter {
  date {
    match => ["message","UNIX_MS"]
    timezone => "Asia/Shanghai"
  }
  #对@timestamp 时间戳字段转换时区
  ruby {
    code => "event.set('temp_timstamp', event.get('@timestamp').time.localtime + 8*60*60)"
  }
  ruby {
    code => "event.set('@timestamp',event.get('temp_timstamp'))"
  }

  #w_start_time、w_stop_time、create_date、update_date、submit_date、sjxcrq、submit_date，方法是使用中间变量代换
  # jdbc-input输入的jdbc时间类型字段，在logsstash中仍然为时间对象
  # 这里不采用ruby的时间对象，因为对象的时间格式为2018-06-12T00:00:00.000Z 是零时区的时间
  # 而是采用将对象转为ISO8601标准的出神入化串格式2018-06-12T00:00:00+08:00 东8区时间
  #w_start_time
  ruby {
    code => "
    tmp = event.get('w_start_time')
    if tmp.nil?
    event.set('temp_start_time', nil)
    else
    event.set('temp_start_time', tmp.time.localtime.strftime('%Y-%m-%dT%H:%M:%S')+'+08:00')
    end
    "
    #删除对象类型的时间字段w_start_time
    remove_field => [ 'w_start_time']
  }
  ruby {
    code => "event.set('w_start_time',event.get('temp_start_time'))"
  }


  #w_stop_time
  ruby {
    code => "
      tmp = event.get('w_stop_time')
      if tmp.nil?
        event.set('temp_stop_time', nil)
      else
        event.set('temp_stop_time', tmp.time.localtime.strftime('%Y-%m-%dT%H:%M:%S')+'+08:00')
      end
    "
    remove_field => [ 'w_stop_time']
  }
  ruby {
    code => "event.set('w_stop_time',event.get('temp_stop_time'))"
  }

  #create_date
  ruby {
    code => "
      tmp = event.get('create_date')
      if tmp.nil?
        event.set('temp_create_date', nil)
      else
        event.set('temp_create_date', tmp.time.localtime.strftime('%Y-%m-%dT%H:%M:%S')+'+08:00')
      end
    "
    remove_field => [ 'create_date']
  }
  ruby {
    code => "event.set('create_date',event.get('temp_create_date'))"
  }

  #update_date
  ruby {
    code => "
      tmp = event.get('update_date')
      if tmp.nil?
        event.set('temp_update_date', nil)
      else
        event.set('temp_update_date', tmp.time.localtime.strftime('%Y-%m-%dT%H:%M:%S')+'+08:00')
      end
    "
    remove_field => [ 'update_date']
  }
  ruby {
    code => "event.set('update_date',event.get('temp_update_date'))"
  }


  #submit_date
  ruby {
    code => "
      tmp = event.get('submit_date')
      if tmp.nil?
        event.set('temp_submit_date', nil)
      else
        event.set('temp_submit_date', tmp.time.localtime.strftime('%Y-%m-%dT%H:%M:%S')+'+08:00')
      end
    "
    remove_field => [ 'submit_date']
  }
  ruby {
    code => "event.set('submit_date',event.get('temp_submit_date'))"
  }

  #sjxcrq
  ruby {
    code => "
      tmp = event.get('sjxcrq')
      if tmp.nil?
        event.set('temp_sjxcrq', nil)
      else
        event.set('temp_sjxcrq', tmp.time.localtime.strftime('%Y-%m-%dT%H:%M:%S')+'+08:00')
      end
    "
    remove_field => [ 'sjxcrq']
  }
  ruby {
    code => "event.set('sjxcrq',event.get('temp_sjxcrq'))"
  }

  # plan_eliminate_date
  ruby {
    code => "
      tmp = event.get('plan_eliminate_date')
      if tmp.nil?
        event.set('temp_plan_eliminate_date', nil)
      else
        event.set('temp_plan_eliminate_date', tmp.time.localtime.strftime('%Y-%m-%dT%H:%M:%S')+'+08:00')
      end
    "
    remove_field => [ 'plan_eliminate_date']
  }
  ruby {
    code => "event.set('plan_eliminate_date',event.get('temp_plan_eliminate_date'))"
  }

  #comment不能作为字段名写在sql文件中，sql使用note别名，这里转换为comment字段
  ruby {
    code => "event.set('comment', event.get('note'))"
  }


  #移除多余的字段
  mutate {
    remove_field => [ "@version",  "temp_timstamp", "tags", "@timestamp",
      "note", "temp_start_time", "temp_stop_time", "temp_create_date",
      "temp_update_date", "temp_submit_date", "temp_sjxcrq", "temp_submit_date", "temp_plan_eliminate_date"]
  }

}

output {
  #stdout { codec => rubydebug }
  #stdout { codec => json_lines }
  elasticsearch {
    hosts => ["172.168.100.128:9200", "172.168.100.129:9200"]
    index => "warn_event"
    document_type => "point_warn"
    doc_as_upsert => true
    document_id => "%{w_record_id}"
  }
}