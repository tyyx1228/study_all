<?xml version="1.0" encoding="UTF-8"?>
<!--
<Configuration>标签中的属性：
    status： log4j2框架自身的日志输出级别
    strict：是否遵循xml严格的格式
    name：  当前配置的名称
    packages：
    monitorInterval: 自动检查配置的时间


Appenders:
http://logging.apache.org/log4j/2.x/manual/appenders.html
    AsyncAppender
    ConsoleAppender
    ConsoleAppender
    FailoverAppender  支持主备
    FileAppender
    FlumeAppender
    JDBCAppender
    JMS Appender
    JPAAppender
    HttpAppender
    KafkaAppender
    MemoryMappedFileAppender  官方性能待测
    NoSQLAppender 官方支持MongoDB和Apache CouchDB的提供程序实现， 可自定义
    OutputStreamAppender
    RandomAccessFileAppender
    RewriteAppender   RewriteAppender允许LogEvent在被另一个Appender处理之前被处理。
    PropertiesRewritePolicy
    RollingFileAppender
    RollingRandomAccessFileAppender
    RoutingAppender
    SMTPAppender
    ScriptAppenderSelector
    SocketAppender
    SyslogAppender
    Zero/JeroMQAppender

Layouts
http://logging.apache.org/log4j/2.x/manual/layouts.html
    CSV 1.CsvParameterLayout适用生成数据库数据文件，之后向数据库中导入csv文件；2.CsvLogEventLayout 生成数据库数据，编程方式适用jdbc驱动导入数据库
    GELF
    HTML
    JSON
    Pattern

-->
<Configuration status="warn" strict="true" name="XMLConfigTest"
               packages="org.apache.logging.log4j.test">
    <!--  定义常量 -->
    <Properties>
        <Property name="sysUserName">${sys:user.name}</Property>
        <Property name="logPath">fv_log4j2/target</Property>
        <Property name="file_name">${logPath}/test.log</Property>
        <Property name="format_constant">${sysUserName} %l %d{yyyy-MM-dd HH:mm:ss} %p [%t] %c{*.}  %m%n</Property><!-- %replace{%m}{2018}{2017} 将消息中2018字符串替换为2018， -->
    </Properties>

    <Filter type="ThresholdFilter" level="debug"/>

    <Appenders>
        <Appender type="Console" name="STDOUT" target="SYSTEM_ERR">
            <!-- <Layout type="PatternLayout" pattern="%m MDC%X%n"/>-->
            <Layout type="PatternLayout" pattern="${format_constant}"/>
            <Filters>
                <Filter type="MarkerFilter" marker="FLOW" onMatch="DENY" onMismatch="NEUTRAL"/>
                <Filter type="MarkerFilter" marker="EXCEPTION" onMatch="DENY" onMismatch="ACCEPT"/>
            </Filters>
        </Appender>
        <Appender type="Console" name="FLOW">
            <Layout type="PatternLayout" pattern="%C{1}.%M %m %ex%n"/><!-- class and line number -->
            <Filters>
                <Filter type="MarkerFilter" marker="FLOW" onMatch="ACCEPT" onMismatch="NEUTRAL"/>
                <Filter type="MarkerFilter" marker="EXCEPTION" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
        </Appender>
        <Appender type="File" name="File" fileName="${file_name}">
            <Layout type="PatternLayout">
                <Pattern>${format_constant}</Pattern>
            </Layout>
        </Appender>
        <Appender type="RollingFile" name="rollfile" fileName="${logPath}/logs/app.log" filePattern="${logPath}/logs/$${date:yyyy-MM-dd}/app-%d{yyyy-MM-dd.HH}-%i.log.gz">
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            <Layout type="PatternLayout">
                <Pattern>${format_constant}</Pattern>
            </Layout>
            <Policies>
                <!--<TimeBasedTriggeringPolicy interval="1" modulate="true"/>--><!-- 时间滚动策略：取决于filePatten上的最小时间单位，本例中最小时间单位为小时，则每interval个小时滚动一次 -->
                <SizeBasedTriggeringPolicy size="250 MB"/><!-- 在时间滚动的同时，也随活动日志文件大小滚动，本例中活动日志达到250M时将滚动一次 -->
            </Policies>
            <!--<DirectWriteRolloverStrategy maxFiles="10"/>--><!-- 每小时（本例最小时间单位为小时）日志文件最大数量 -->
        </Appender>
    </Appenders>

    <Loggers>
        <Logger name="org.apache.logging.log4j.test1" level="debug" additivity="false">
            <Filter type="ThreadContextMapFilter">
                <KeyValuePair key="test" value="123"/>
            </Filter>
            <AppenderRef ref="STDOUT"/>
        </Logger>

        <Logger name="com.tongyu.diffdir.HelloWorld" level="debug" additivity="false">
            <AppenderRef ref="rollfile"/>
        </Logger>

        <!-- 只针对类com.tongyu.log4j2.FormatLogger配置日志级别，便于最终单个类中日志 ,
            实际应用中，可以通过<root>标签屏蔽所有日志，再只对FormatLogger类中的日志进行跟踪

             其次，<Logger>标签中name属性可以设置为具体的类，也可以指定包名。当指定为包名时，改配置对指定包下所有类都生效。
             单是要注意，标签<Loggers>中，<root>标签为当前<Logger>标签的父Apperder，即com.tongyu.log4j2具有两个appender，
             若两个appender名称相同，这会使得程序中调用一次日志输出方法，会在同一个输出介质上出现两条完全相同的日志，
                解决方法1. Logger标签中不添加appender的引用，日志将由<root>标签中的appender输出。
                解决方法2. Logger标签中添加appender的引用，同时指定additivity属性为false，日志将由Logger标签中添加appender输出。
             -->
        <Logger name="com.tongyu.log4j2" level="trace" additivity="false">
            <AppenderRef ref="STDOUT"/>
        </Logger>

        <!-- 应用全局日志级别配置 -->
        <Root level="warn">
            <AppenderRef ref="STDOUT"/>
        </Root>

    </Loggers>

</Configuration>